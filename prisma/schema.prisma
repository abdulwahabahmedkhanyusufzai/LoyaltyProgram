generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Offer {
  id           String            @id @default(uuid())
  name         String
  description  String
  image        String?
  offerType    OfferType
  value        Float
  pointsCost   Int?
  tierRequired String?
  usageLimit   Int?
  isActive     Boolean           @default(true)
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  redemptions  OfferRedemption[]
}

model OfferRedemption {
  id         String   @id @default(cuid())
  offerId    String
  userId     String
  redeemedAt DateTime @default(now())
  metadata   Json?
  offer      Offer    @relation(fields: [offerId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([offerId])
  @@index([userId])
}

model User {
  id              String            @id @default(cuid())
  fullName        String
  email           String            @unique
  phoneNumber     String
  password        String
  username        String            @unique
  profilePicUrl   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  shopId          Int?
  OfferRedemption OfferRedemption[]
  shop            Shop?             @relation(fields: [shopId], references: [id])
  walletCredits   WalletCredit[]
}

model Shop {
  id          Int      @id @default(autoincrement())
  shop        String   @unique
  accessToken String
  scope       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  users       User[]
}

model PointsLedger {
  id           String    @id @default(cuid())
  customerId   String
  change       Int
  balanceAfter Int
  reason       String?
  sourceType   String?
  sourceId     String?
  earnedAt     DateTime  @default(now())
  expiresAt    DateTime?
  metadata     Json?
  orderId      String?
  customer     Customer  @relation(fields: [customerId], references: [id])
  order        Order?    @relation(fields: [orderId], references: [id])

  @@index([customerId])
  @@index([expiresAt])
}

model WalletCredit {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  currency  String   @default("EUR")
  source    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model LoyaltyLevel {
  id             Int    @id @default(autoincrement())
  name           String
  pointsRequired Int
  benefits       Json?
}

model PointRule {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  description String?
  points      Int
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  metadata    Json?
}

model Campaign {
  id         Int      @id @default(autoincrement())
  name       String
  multiplier Float    @default(1.0)
  startAt    DateTime
  endAt      DateTime
  createdAt  DateTime @default(now())
}

model LoyaltyProgram {
  id         Int      @id @default(autoincrement())
  tiers      Json
  rows       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  conversion Json?    @default("{\"euro\": 10, \"point\": 1}")
}

model Customer {
  id             String         @id @default(uuid())
  firstName      String
  shopifyId      String         @unique
  lastName       String
  email          String         @unique
  numberOfOrders Int            @default(0)
  amountSpent    Decimal        @default(0)
  loyaltyTitle   String         @default("Welcomed")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  orders         Order[]
  pointsLedger   PointsLedger[]

  @@map("loyal_customers")
}

model AdventCalendarEntry {
  id        Int      @id @default(autoincrement())
  month     String
  day       Int
  event     String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String         @id @default(cuid())
  customerId     String
  shopId         Int?
  orderNumber    String         @unique
  totalAmount    Decimal        @default(0)
  currency       String         @default("EUR")
  status         OrderStatus    @default(PENDING)
  pointsEarned   Int            @default(0)
  pointsRedeemed Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  metadata       Json?
  customer       Customer       @relation(fields: [customerId], references: [id])
  shop           Shop?          @relation(fields: [shopId], references: [id])
  items          OrderItem[]
  pointsLedger   PointsLedger[]

  @@index([customerId])
  @@index([shopId])
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String?
  productName String
  quantity    Int      @default(1)
  price       Decimal  @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id])
}

enum OfferType {
  PERCENTAGE
  FIXED
  POINTS
  CASHBACK
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}
