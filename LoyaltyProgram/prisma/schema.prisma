generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Offer {
  id          String   @id @default(cuid())
  name        String
  description String
  pointsCost  Int?
  discount    Float?
  startDate   DateTime
  endDate     DateTime
  tiers       String[]  // ["Bronze", "Silver", "Gold"]
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id             String          @id @default(cuid())
  fullName       String
  email          String          @unique
  phoneNumber    String
  password       String
  username       String          @unique
  profilePicUrl  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  shopId         Int?
  shop           Shop?           @relation(fields: [shopId], references: [id])

  // Relations for loyalty program
  pointsLedger   PointsLedger[]
  walletCredits  WalletCredit[]
}

model Shop {
  id          Int      @id @default(autoincrement())
  shop        String   @unique
  accessToken String
  scope       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
}

model PointsLedger {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  change      Int      // +points earned, -points spent/expired
  balanceAfter Int     // balance snapshot after this transaction
  reason      String?  // e.g. "order.created", "manual admin add"
  sourceType  String?  // e.g. "order", "referral", "campaign"
  sourceId    String?  // reference to order/referral id
  earnedAt    DateTime @default(now())
  expiresAt   DateTime?
  metadata    Json?

  @@index([userId])
  @@index([expiresAt])
}

model WalletCredit {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  amount    Float
  currency  String   @default("EUR")
  source    String?  // refund, manual, etc.
  createdAt DateTime @default(now())
}

model LoyaltyLevel {
  id              Int      @id @default(autoincrement())
  name            String
  pointsRequired  Int
  benefits        Json?
}

model PointRule {
  id          Int      @id @default(autoincrement())
  key         String   @unique // e.g. "order.created"
  description String?
  points      Int
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  metadata    Json?
}

model Campaign {
  id         Int      @id @default(autoincrement())
  name       String
  multiplier Float    @default(1.0) // e.g. 2.0 = double points
  startAt    DateTime
  endAt      DateTime
  createdAt  DateTime @default(now())
}

model LoyaltyProgram {
  id        Int      @id @default(autoincrement())
  tiers     Json
  rows      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Customer {
  id               String   @id @default(uuid()) // Unique identifier for the customer.
  firstName        String
  lastName         String
  email            String   @unique
  numberOfOrders   Int      @default(0)
  amountSpent      Decimal  @default(0) // Using Decimal for precise currency values.
  loyaltyTitle     String   @default("Welcomed")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("loyal_customers") // This maps the model to a table named "loyal_customers"
}